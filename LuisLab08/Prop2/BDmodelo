import java.sql.*;

public class BDmodelo {
	private Connection conn = null;
	
	public BDmodelo() {
		String url = "jdbc:sqlite:biblioteca.db";
		try {
	        Class.forName("org.sqlite.JDBC");
	        this.conn = DriverManager.getConnection(url);
	    } catch (ClassNotFoundException e) {
	        System.out.println("Error: " + e.getMessage());
	    } catch (SQLException e) {
	        System.out.println("Error: " + e.getMessage());
	    }
	}
	//Método para crear las TABLAS
	public void crearTablas() {
	    String sql = "CREATE TABLE IF NOT EXISTS usuarios (\n"
	            + " id_usuario INTEGER PRIMARY KEY AUTOINCREMENT,\n"
	            + " nombre TEXT NOT NULL,\n"
	            + " contrasenia TEXT NOT NULL\n"
	            + ");";
	    String sql1 = "CREATE TABLE IF NOT EXISTS usuarios_personajes (\n"
	    		+ " FOREIGN KEY (id_usuario) REFERENCES usuarios (id_usuario),\n"
	    		+ " FOREIGN KEY (id_personaje) REFERENCES personajes (id_personaje)\n"
	            + ");";
	    String sql2 = "CREATE TABLE IF NOT EXISTS personajes (\n"
	            + " id_personaje INTEGER PRIMARY KEY AUTOINCREMENT,\n"
	            + " nombre TEXT NOT NULL,\n"
	            + " vida INTEGER,\n"
	            + " ataque INTEGER,\n"
	            + " defensa INTEGER,\n"
	            + " alcance INTEGER,\n"
	            + " FOREIGN KEY (id_inventario) REFERENCES inventarios (id_inventario)\n"
	            + ");";
	    String sql3 = "CREATE TABLE IF NOT EXISTS enemigos (\n"
	            + " id_enemigo INTEGER PRIMARY KEY AUTOINCREMENT,\n"
	            + " nombre TEXT NOT NULL,\n"
	            + " salud INTEGER,\n"
	            + " ataque INTEGER,\n"
	            + " tipo TEXT NOT NULL\n"
	            + ");";
	    String sql4 = "CREATE TABLE IF NOT EXISTS inventarios (\n"
	            + " id_inventario INTEGER PRIMARY KEY AUTOINCREMENT,\n"
	            + " FOREGIN KEY (id_personaje) REFERENCES personajes (id_personaje)\n"
	            + ");";
	    String sql5 = "CREATE TABLE IF NOT EXISTS inventarios_items (\n"
	            + " FOREGIN KEY (id_inventario) REFERENCES inventario (id_inventario),\n"
	            + " FOREGIN KEY (id_item) REFERENCES items (id_item)\n"
	            + ");";
	    String sql6 = "CREATE TABLE IF NOT EXISTS items (\n"
	            + " id_item INTEGER PRIMARY KEY AUTOINCREMENT,\n"
	            + " nombre TEXT NOT NULL,\n"
	            + " tipo TEXT NOT NULL,\n"
	            + " descripcion TEXT NOT NULL,\n"
	            + " cantidad INTEGER\n"
	            + ");";
	    String sql7 = "CREATE TABLE IF NOT EXISTS combates (\n"
	            + " id_combate INTEGER PRIMARY KEY AUTOINCREMENT,\n"
	            + " resultado TEXT NOT NULL,\n"
	            + " FOREGIN KEY (id_personaje) REFERENCES personajes (id_personaje),\n"
	            + " FOREGIN KEY (id_enemigo) REFERENCES enemigos (id_enemigo),\n"
	            + " FOREGIN KEY (id_turno) REFERENCES turnos (id_turno)\n"
	            + ");";
	    String sql8 = "CREATE TABLE IF NOT EXISTS turnos (\n"
	            + " id_turno INTEGER PRIMARY KEY AUTOINCREMENT,\n"
	            + " descripcion TEXT NOT NULL\n"
	            + ");";
	    try {Statement stmt = conn.createStatement();
	    	stmt.execute(sql);
	    	stmt.execute(sql1);
	    	stmt.execute(sql2);
	    	stmt.execute(sql3);
	    	stmt.execute(sql4);
	    	stmt.execute(sql5);
	    	stmt.execute(sql6);
	    	stmt.execute(sql7);
	    	stmt.execute(sql8);
	    } catch (SQLException e) {
	        System.out.println(e.getMessage());
	    }
	}
	//Métodos TABLA usuarios
	public void insertarUsuario(String nombre, String contrasenia) {
		String sql = "INSERT INTO usuarios (nombre, contrasenia) VALUES(?, ?)";
	    try {PreparedStatement pstmt = conn.prepareStatement(sql);
	    	pstmt.setString(1, nombre);
	        pstmt.setString(2, contrasenia);
	        pstmt.executeUpdate();
	    } catch (SQLException e) {
	        System.out.println(e);
	    }
	}
	public void actualizarUsuario(int id_usuario, String nombre, String contrasenia) {
		String sql = "UPDATE usuarios SET nombre = ?, contrasenia = ? WHERE id_usuario = ?";
	    try {PreparedStatement pstmt = conn.prepareStatement(sql);
	        pstmt.setString(1, nombre);
	        pstmt.setString(2, contrasenia);
	        pstmt.setInt(3, id_usuario);
	        pstmt.executeUpdate();
	    } catch (SQLException e) {
	        System.out.println(e.getMessage());
	    }
	}
	public void mostrarUsuario(int id_usuario) {
		String sql = "SELECT * FROM usuarios WHERE id_usuario = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id_usuario);
            ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				System.out.print("\nId_usuario: " + rs.getInt("id_usuario"));
				System.out.print(" | Nombre: " + rs.getString("nombre"));
				System.out.print(" | Contraseña: " + rs.getInt("contrasenia"));
			} else {
				System.out.println("No se encontró el registro.");
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarUsuario() {
		String sql = "SELECT * FROM usuarios";
        try {Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                System.out.print("\nId_usuario: " + rs.getInt("id_usuario"));
                System.out.print("Nombre: " + rs.getString("nombre"));
                System.out.print("Contraseña: " + rs.getString("contrasenia"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
	}
	public void borrarUsuario(int id_usuario) {
		String sql = "DELETE FROM usuarios WHERE id_usuario = ?";
	    try {PreparedStatement pstmt = conn.prepareStatement(sql);
	        pstmt.setInt(1, id_usuario);
	        pstmt.executeUpdate();
	    } catch (SQLException e) {
	        System.out.println(e.getMessage());
	    }
	}
	//Métodos TABLA usuarios_personajes
	public void insertarUsuario_Personaje(int id_usuario, int id_personaje) {
		String sql = "INSERT INTO usuarios_personajes (id_usuario, id_personaje) VALUES (?,?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_usuario);
	        pstmt.setInt(2, id_personaje);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}			
	}
	public void borrarUsuario_Personaje() {
		String sql = "DELETE FROM usuarios_personajes";
		try {Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
	//Métodos TABLA personajes
	public void insertarPersonaje(String nombre, int vida, int ataque, int defensa, int alcance, int id_inventario) {
		String sql = "INSERT INTO personajes (nombre, vida, ataque, defensa, alcance, id_inventario) VALUES (?,?,?,?,?,?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nombre);
			pstmt.setInt(2, vida);
			pstmt.setInt(3, ataque);
			pstmt.setInt(4, defensa);
			pstmt.setInt(5, alcance);
			pstmt.setInt(6, id_inventario);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
	public void actualizarPersonaje(int id_personaje, String nombre, int vida, int ataque, int defensa, int alcance, int id_inventario) {
		String sql = "UPDATE personajes SET nombre = ?, vida = ? ataque = ? defensa = ? alcance = ? id_inventario: ? WHERE id_personaje = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nombre);
			pstmt.setInt(2, vida);
			pstmt.setInt(3, ataque);
			pstmt.setInt(4, defensa);
			pstmt.setInt(5, alcance);
			pstmt.setInt(6, id_inventario);
			pstmt.setInt(7, id_personaje);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarPersonaje(int id_personaje) {
		String sql = "SELECT * FROM personajes WHERE id_personaje = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id_personaje);
            ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				System.out.print("\nId_personaje: " + rs.getInt("id_personaje"));
				System.out.print(" | Nombre: " + rs.getString("nombre"));
				System.out.print(" | Vida: " + rs.getInt("vida"));
				System.out.print(" | Ataque: " + rs.getInt("ataque"));
				System.out.print(" | Defensa: " + rs.getInt("defensa"));
				System.out.print(" | Alcance: " + rs.getInt("alcance"));
				System.out.print(" | Id_inventario: " + rs.getInt("id_inventario"));
			} else {
				System.out.println("No se encontró el registro.");
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarPersonaje() {
		String sql = "SELECT * FROM presonajes";
        try {Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            	System.out.print("\nId_personaje: " + rs.getInt("id_personaje"));
				System.out.print(" | Nombre: " + rs.getString("nombre"));
				System.out.print(" | Vida: " + rs.getInt("vida"));
				System.out.print(" | Ataque: " + rs.getInt("ataque"));
				System.out.print(" | Defensa: " + rs.getInt("defensa"));
				System.out.print(" | Alcance: " + rs.getInt("alcance"));
				System.out.print(" | Id_inventario: " + rs.getInt("id_inventario"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
	}
	public void borrarPersonaje(int id_personaje) {
		String sql = "DELETE FROM personajes WHERE id_personaje = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_personaje);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
	//Métodos TABLA enemigos
	public void insertarEnemigo(String nombre, int vida, int ataque, String tipo) {
		String sql = "INSERT INTO enemigos (nombre, vida, ataque, tipo) VALUES (?,?,?,?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nombre);
			pstmt.setInt(2, vida);
			pstmt.setInt(3, ataque);
			pstmt.setString(4, tipo);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}			
	}
	public void actualizarEnemigo(int id_enemigo, String nombre, int vida, int ataque, String tipo) {
		String sql = "UPDATE enemigos SET nombre = ?, vida = ? ataque = ? tipo = ? WHERE id_enemigo = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nombre);
			pstmt.setInt(2, vida);
			pstmt.setInt(3, ataque);
			pstmt.setString(4, tipo);
			pstmt.setInt(5, id_enemigo);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarEnemigo(int id_enemigo) {
		String sql = "SELECT * FROM enemigos WHERE id_enemigo = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id_enemigo);
            ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				System.out.print("\nId_enemigo: " + rs.getInt("id_enemigo"));
				System.out.print(" | Nombre: " + rs.getString("nombre"));
				System.out.print(" | Vida: " + rs.getInt("vida"));
				System.out.print(" | Ataque: " + rs.getInt("ataque"));
				System.out.print(" | Tipo: " + rs.getString("tipo"));
			} else {
				System.out.println("No se encontró el registro.");
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarEnemigo() {
		String sql = "SELECT * FROM enemigos";
        try {Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            	System.out.print("\nId_enemigo: " + rs.getInt("id_enemigo"));
				System.out.print(" | Nombre: " + rs.getString("nombre"));
				System.out.print(" | Vida: " + rs.getInt("vida"));
				System.out.print(" | Ataque: " + rs.getInt("ataque"));
				System.out.print(" | Tipo: " + rs.getString("tipo"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
	}
	public void borrarEnemigo(int id_enemigo) {
		String sql = "DELETE FROM enemigos WHERE id_enemigo = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_enemigo);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
	//Métodos TABLA items
	public void insertarItem(String nombre, String tipo, String descripcion, int cantidad) {
		String sql = "INSERT INTO items (nombre, tipo, descripcion, cantidad) VALUES (?,?,?,?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nombre);
			pstmt.setString(2, tipo);
			pstmt.setString(3, descripcion);
			pstmt.setInt(4, cantidad);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}			
	}
	public void actualizarItem(int id_item, String nombre, String tipo, String descripcion, int cantidad) {
		String sql = "UPDATE items SET nombre = ?, tipo = ? descripcion = ? cantidad = ? WHERE id_item = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, nombre);
			pstmt.setString(2, tipo);
			pstmt.setString(3, descripcion);
			pstmt.setInt(4, cantidad);
			pstmt.setInt(5, id_item);
			pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarItem(int id_item) {
		String sql = "SELECT * FROM items WHERE id_item = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id_item);
            ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				System.out.print("\nId_item: " + rs.getInt("id_item"));
				System.out.print(" | Nombre: " + rs.getString("nombre"));
				System.out.print(" | Tipo: " + rs.getString("tipo"));
				System.out.print(" | Descripción: " + rs.getString("descripcion"));
				System.out.print(" | Cantidad: " + rs.getInt("cantidad"));
			} else {
				System.out.println("No se encontró el registro.");
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarItem() {
		String sql = "SELECT * FROM items";
        try {Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            	System.out.print("\nId_item: " + rs.getInt("id_item"));
				System.out.print(" | Nombre: " + rs.getString("nombre"));
				System.out.print(" | Tipo: " + rs.getString("tipo"));
				System.out.print(" | Descripción: " + rs.getString("descripcion"));
				System.out.print(" | Cantidad: " + rs.getInt("cantidad"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
	}
	public void borrarItem(int id_item) {
		String sql = "DELETE FROM items WHERE id_item = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_item);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
	//Métodos TABLA inventarios
	public void insertarInventario(int id_inventario) {
		String sql = "INSERT INTO inventarios (id_inventario) VALUES (?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_inventario);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}			
	}
	public void borrarInventario(int id_inventario) {
		String sql = "DELETE FROM inventarios WHERE id_inventario = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_inventario);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}
	} 
	//Métodos TABLA inventarios_items
	public void insertarIntentario_Item(int id_inventario, int id_item) {
		String sql = "INSERT INTO inventarios_items (id_inventario, id_item) VALUES (?,?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_inventario);
	        pstmt.setInt(2, id_item);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}			
	}
	public void borrarInventario_Item() {
		String sql = "DELETE FROM inventarios_items";
		try {Statement stmt = conn.createStatement();
			stmt.executeUpdate(sql);
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
	//Métodos TABLA combates
	public void insertarCombate(int id_personaje, int id_enemigo, boolean resultado) {
		String sql = "INSERT INTO combates (id_personaje, id_enemigo, resultado) VALUES (?,?,?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_personaje);
	        pstmt.setInt(2, id_enemigo);
	        pstmt.setBoolean(3, resultado);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}			
	}
	public void mostrarCombate(int id_combate) {
		String sql = "SELECT * FROM combates WHERE id_combate = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id_combate);
            ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				System.out.print("\nId_combate: " + rs.getInt("id_combate"));
				System.out.print(" | Id_personaje: " + rs.getInt("id_personaje"));
				System.out.print(" | Id_enemigo: " + rs.getInt("id_enemigo"));
				System.out.print(" | Resultado: " + rs.getBoolean("resultado"));
			} else {
				System.out.println("No se encontró el registro.");
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarCombate() {
		String sql = "SELECT * FROM combates";
        try {Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            	System.out.print("\nId_combate: " + rs.getInt("id_combate"));
				System.out.print(" | Id_personaje: " + rs.getInt("id_personaje"));
				System.out.print(" | Id_enemigo: " + rs.getInt("id_enemigo"));
				System.out.print(" | Resultado: " + rs.getBoolean("resultado"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
	}
	public void borrarCombate(int id_combate) {
		String sql = "DELETE FROM combates WHERE id_combate = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_combate);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
	//Métodos TABLA turnos
	public void insertarTurno(String descripcion) {
		String sql = "INSERT INTO turnos (descripcion) VALUES (?)";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, descripcion);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}			
	}
	public void mostrarTurno(int id_turno) {
		String sql = "SELECT * FROM turnos WHERE id_turno = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, id_turno);
            ResultSet rs = pstmt.executeQuery();
			if(rs.next()) {
				System.out.print("\nId_turno: " + rs.getInt("id_turno"));
				System.out.print(" | Descripción: " + rs.getString("descripcion"));
			} else {
				System.out.println("No se encontró el registro.");
			}
		} catch (SQLException e) {
			System.out.println(e);
		}
	}
	public void mostrarTurno() {
		String sql = "SELECT * FROM turnos";
        try {Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
            	System.out.print("\nId_turno: " + rs.getInt("id_turno"));
				System.out.print(" | Descripción: " + rs.getString("descripcion"));
            }
        } catch (SQLException e) {
            System.out.println(e);
        }
	}
	public void borrarTurno(int id_turno) {
		String sql = "DELETE FROM turnos WHERE id_turno = ?";
		try {PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id_turno);
			pstmt.executeUpdate();
		} catch(SQLException e) {
			System.out.println(e);
		}
	}
}

