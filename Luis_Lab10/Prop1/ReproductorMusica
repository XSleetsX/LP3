import javax.swing.*;
import java.awt.*;
import javax.sound.sampled.*;
import java.io.File;
import java.io.IOException;

public class ReproductorMusica {
    private static Clip clip;
    private static long segundoActual = 0;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ReproductorMusica::interfazReproductor);
    }

    private static void interfazReproductor() {
        JFrame frame = new JFrame("Reproductor de música");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 150);
        frame.setLayout(new FlowLayout());
        
        JButton botonReproducir = new JButton("Reproducir");
        JButton botonPausar = new JButton("Pausar");
        JButton botonReanudar = new JButton("Reanudar");

        botonReproducir.addActionListener(e -> reproducirMusica("C:\\Users\\User\\eclipse-workspace\\Lab10_Prop1_B\\src\\apostasy.wav"));
        botonPausar.addActionListener(e -> pausarMusica());
        botonReanudar.addActionListener(e -> reanudarMusica());

        frame.add(botonReproducir);
        frame.add(botonPausar);
        frame.add(botonReanudar);

        frame.setVisible(true);
    }

    private static void reproducirMusica(String nombreArchivoMusica) {
        try {
            if (clip != null && clip.isRunning()) {
                clip.stop();
                clip.close();
            }
            File archivoMusica = new File(nombreArchivoMusica);
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(archivoMusica);
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);

            clip.setMicrosecondPosition(0);
            segundoActual = 0;
            clip.start();
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al reproducir la música: " + e.getMessage());
        }
    }

    private static void pausarMusica() {
        if (clip != null && clip.isRunning()) {
        	segundoActual = clip.getMicrosecondPosition();
            clip.stop();
        }
    }

    private static void reanudarMusica() {
        if (clip != null && !clip.isRunning()) {
            clip.setMicrosecondPosition(segundoActual);
            clip.start();
        }
    }
}
